#pragma kernel Sort
#pragma kernel CalculateOffsets

// Structure representing an entry in the sorting buffer
struct Entry
{
	uint originalIndex;
	uint hash;
	uint key;
};

// Buffer of entries to be sorted
RWStructuredBuffer<Entry> Entries;
const uint numEntries;
const uint groupWidth;
const uint groupHeight;
const uint stepIndex;
// Define the number of threads per thread group
[numthreads(128, 1, 1)]
void Sort (uint3 id : SV_DispatchThreadID)
{
	uint i = id.x;

    uint hIndex = i & (groupWidth - 1); // Calculate horizontal index
    uint indexLeft = hIndex + (groupHeight + 1) * (i / groupWidth); // Calculate left index
	uint rightStepSize = stepIndex == 0 ? groupHeight - 2 * hIndex : (groupHeight + 1) / 2;
    uint indexRight = indexLeft + rightStepSize; // Calculate right index

	 // If the right index is out of bounds, return
	if (indexRight >= numEntries) return;

    uint valueLeft = Entries[indexLeft].key; // Get the key of the left entry
    uint valueRight = Entries[indexRight].key; // Get the key of the right entry

	// If the left value is greater than the right value, swap the entries
	if (valueLeft > valueRight)
	{
		Entry temp = Entries[indexLeft];
		Entries[indexLeft] = Entries[indexRight];
		Entries[indexRight] = temp;
	}
}

// Buffer for storing offsets
RWStructuredBuffer<uint> Offsets;

// Define the number of threads per thread group
[numthreads(128, 1, 1)]
void CalculateOffsets(uint3 id : SV_DispatchThreadID)
{
	// If the thread ID is out of bounds, return
    if (id.x >= numEntries) { return; }

	uint i = id.x;
	uint null = numEntries;

    uint key = Entries[i].key; // Get the key of the current entry
    uint keyPrev = i == 0 ? null : Entries[i - 1].key; // Get the key of the previous entry
	// If the current key is different from the previous key, set the offset
	if (key != keyPrev)
	{
		Offsets[key] = i;
	}
}